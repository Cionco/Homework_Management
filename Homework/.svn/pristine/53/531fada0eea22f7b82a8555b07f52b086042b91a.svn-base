package de.fs.webarch.server;

import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Properties;
import java.util.Set;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;
import javax.sql.DataSource;


/**
 * Application Lifecycle Listener implementation class DbPmPlusContextListener
 *
 */
@WebListener
public class ContextListener implements ServletContextListener {

	/*private static Properties passwords=new Properties();
	private static Properties usergroups=new Properties();
	private static Properties names=new Properties();*/
	private static DataSource dataSource = null;
	private static Connection con = null;
	private static Statement stmt = null;

	/**
	 * Default constructor. 
	 */
	public ContextListener() {
	}

	/**
	 * @see ServletContextListener#contextDestroyed(ServletContextEvent)
	 */
	public void contextDestroyed(ServletContextEvent arg0)  { 
		try {
			stmt.close();
			con.close();
		} catch(SQLException e) {
			e.printStackTrace();
		} catch(NullPointerException e) {
			
		}
		System.out.println("und tschuess...");
	}

	/**
	 * @see ServletContextListener#contextInitialized(ServletContextEvent)
	 */
	public void contextInitialized(ServletContextEvent event)  { 
		System.getProperties().setProperty("Dorg.apache.cxf.stax.allowInsecureParser", "1");
		System.out.println("sys prop set");

		ServletContext servletContext = event.getServletContext();
		//passwords= readPasswordFile(servletContext);
		
		//usergroups = readUsergroupsFile(servletContext);
		dataSource = getDBConnection(servletContext);
	}

	/*public static Properties readPasswordFile(ServletContext servletContext) {
		if(passwords!=null && passwords.size()>0) return passwords; // keep Listener class from being GCed
		
		Properties props=new Properties();
		FileReader reader =null;
		try {
			String contextPasswdParam=servletContext.getInitParameter("passwordfileDebug");
			reader = new FileReader(contextPasswdParam);
			props.load(reader);
			System.out.println("Passwords read successfully "+contextPasswdParam);
		} catch(Exception e) {
			e.printStackTrace();
			if(reader!=null)
				try {
					reader.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
		}
		return props;
	}
	
	public static Properties readUsergroupsFile(ServletContext servletContext) {
		if(usergroups != null && usergroups.size() > 0) return usergroups;
		
		Properties props = new Properties();
		String contextUsergrpParam=servletContext.getInitParameter("usergrpfileDebug");
		try (FileReader reader = new FileReader(contextUsergrpParam)) {
			props.load(reader);
			System.out.println("Usergroups read successfully " + contextUsergrpParam);
		} catch(IOException e) {
			e.printStackTrace();
		}
		return props;
	}*/
	
	public static DataSource getDBConnection(ServletContext servletContext) {
		DataSource ds = null;
		try {
			Context initCtx = new InitialContext();
			Context envCtx = (Context) initCtx.lookup("java:comp/env");
			ds = (DataSource) envCtx.lookup("jdbc/Homework");
			System.out.println("Database Connection created successfully");
		} catch(NamingException e) {
			e.printStackTrace();
		}
		return ds;
		
	}


	public static boolean isUserAuthentic(String username, String passwordFromForm) {
		if(username == null || username.equals("null")) return false;
		ResultSet rs = executeQuery("SELECT password FROM User WHERE u_name = '" + username + "';");
		String realPwd = "";
		try {
			rs.next();
			realPwd=rs.getString(1);
		}catch(SQLException e) {
			e.printStackTrace();
			return false;
		}

		if(passwordFromForm!=null && passwordFromForm.equals(realPwd)) {
			return true;
		}

		return false;

	}
	
	public static int getUsergroup(String username) {
		ResultSet rs = executeQuery("SELECT ug_id FROM User WHERE u_name = '" + username + "';");
		try {
			rs.next();
			return rs.getInt(1);
		} catch(SQLException e) {
			return 0;
		}
	}
	
	public static ResultSet executeQuery(String sql) {
		ResultSet rs = null;
		try {
			if(con == null) con = dataSource.getConnection();
			if(stmt == null) stmt = con.createStatement();
			rs = stmt.executeQuery(sql);
			System.out.println("Anweisung ohne Problem ausgeführt; " + sql);
		} catch(SQLException e) {
			System.out.println("Mit Fehler abgeschlossen: " + sql);
			rs = null;
			e.printStackTrace();
		}
		return rs;
		
	}
	
	public static boolean execute(String sql) {
		boolean result = false;
		try {
			if(con == null) con = dataSource.getConnection();
			if(stmt == null) stmt = con.createStatement();
			result = stmt.execute(sql);
			System.out.println("Anweisung ohne Problem ausgeführt; " + sql);
		} catch(SQLException e) {
			result = false;
			e.printStackTrace();
		} 
		return result;
	}
	
	public static int executeUpdate(String sql) {
		int result = 0;
		try {
			if(con == null) con = dataSource.getConnection();
			if(stmt == null) stmt = con.createStatement();
			result = stmt.executeUpdate(sql);
			System.out.println("Anweisung ohne Problem ausgeführt; " + sql);
		} catch(SQLException e) {
			result = -1;
			e.printStackTrace();
		}
		return result;
	}
}
